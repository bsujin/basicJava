package e_oop;

public class VariableInit {
	// 변수를 초기화 하는 방법

	// 클래스 (변수 + 매서드)

	// 초기화 방법
	// 1. 명시적 초기화 : 변수를 선언하면서 값을 넣어주는것 (값만 넣을 수 있음)
	int var = 10;
	static int staticVar = 20; //

	// 2. 초기화 블럭 -클래스 안에 {}
	// 여러줄의 코드를 작성할 수 있음
	{
		var = 30; // (인스턴스 변수를 초기화 )
	}

	static {
		staticVar = 40; // (클래스를 초기화 )
	}

	/*
	 * 생성자 
	 * 객체가 생성되고 바로 자동으로 호출 
	 * 의미 : 클래스와 같은 이름의 메서드 ({}) - '인스턴스 변수'를 초기화하기 위해 사용한다. - 클래스에 생성자는
	 * 반드시 하나 이상 존재해야 한다. 그래야 객체 생성 가능 - 직접 선언해주지 않으면 컴파일러가 기본 생성자(아무 내용도 없는 생성자)를 만들어준다. - 생성자는 리턴타입이 없다.
	 */
			// 클래스 이름과 똑같은 생성자- 인스턴스 변수와 클래스 변수를 초기화함, 파라미터()는 필요 유무에 따라 작성
		// {} 안에 변수초기화

	VariableInit() { 
		var = 50;

		// staticVar = 60;
		// 클래스 변수를 생성자에서 초기화 하는것은 할수도 있지만 좋지 않다. -> 값을 공유해야하는 클래스 변수가 객체 생성시 마다 계속 초기화되기 때문에
		// 생성자 안에서 초기화 해주는 이유? (생성자 사용이유)  => 초기화에 여러줄의 코드가 필요할 때, 초기화에 파라미터가 필요할 때 사용
		// 전역변수 = 밖에 위치, static의 유무에 따라 다름 - 객체변수 (인스턴스 변수) 와 클래스변수 (static 변수) 
	}
	
	public static void main (String[] args){
		Init i = new Init();
		
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();	//컴파일러가 기본적으로 만들어준 생성자(생성자가 하나도 없을 때 만들어줌)
								//밑에 생성자를 만들어 줌으로써 더이상 존재하지 않으므로 에러 발생 -> 하나 더 만들면 가능 ( 파라미터가 없는 생성자 만들어줌)
		i2.a = 10;
		i2.b = 20;
		i2.c = 30;
		
		// 왜 파라미터를 받아야 하는가?
		// => 원하고자 하는 값을 얻기위해 일일히 변수를 주기에 번거로움  => '파라미터로 값을 초기화 ' 
		// 위에와 밑에 값이 동일하나, 훨신 더 수월하게 가능함	
		
		Init i3 =  new Init(70,80,90);	//객체생성(밑에 만든 생성자를 통해)

		
		
	}

}

	class Init {

		int a;
		int b;
		int c;
		
		// 생성자 만들기  -> 파라미터 받은 값으로 초기화
		
		Init(int a, int b, int c){
			this.a = a;	
			this.b = b;
			this.c = c;
			
			//this : 인스턴스 변수(매서드 밖)  와 지역 변수(매서드 안)의 이름이 같을 때 둘을 구분하기 위해 사용한다.
		}
		
		
		//똑같은 이름을 가진 매서드 생성 가능 -> 이름으로 구분이 안되므로 '파라미터'로 구분가능
		// 같은 이름으로 매서드를 여러개 정의하는 것 = "오버로딩"
		// 대표적인 오버로딩 매서드 : System.out.println() => ()안에 파라미터가 다름, 다양하게 사용 가능  
		
		Init(){ //파라미터가 없는 생성자 
			this(10, 20, 30);	//기본적으로 변수에 값을 넣어준 채로 시작
			
			//	a = 10; 	b = 20; 	c = 30;
			// this(10, 20, 30);	->컴파일 에러 발생 = 반드시 생성자 생성 첫줄에 사용 (위에 a,b,c가 의미없어짐 , 만들 이유가 없음)
			//this() : 생성자에서 다른 생성자를 호출할 때 사용한다.
			
			
		}		
}
